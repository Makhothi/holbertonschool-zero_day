#include "main.h"
#include <stdio.h>
#include <stdarg.h>
#include <unistd.h>
/**
 * _printf - Custom printf function handling %c, %s, and %%
 * @format: Pointer to the format string
 *
 * Return: Number of characters printed (excluding null byte)
 */
int _printf(const char *format, ...)
{
va_list args;
int count = 0;

if (format == NULL)
return (-1);

va_start(args, format);
while (*format)
{
if (*format == '%')
{
format++;
if (*format == '\0')
{
write(1, "%", 1);
count++;
break;
}
else if (*format == 'c' || *format == 's' || *format == '%')
{
count += handle_specifier(*format, args);
}
else
{
write(1, "%", 1);
write(1, format, 1);
count += 2;
}
}
else
{
write(1, format, 1);
count++;
}
format++;
}
va_end(args);
return (count);
}
/**
 * handle_specifier - Handles %c, %s, and %%
 * @format: Format specifier
 * @args: Arguments list
 *
 * Return: Number of characters handled
 */
int handle_specifier(char format, va_list args)
{
int count = 0;
switch (format)
{
case 'c':
count = handle_char(va_arg(args, int));
break;
case 's':
count = handle_string(va_arg(args, char *));
break;
case '%':
write(1, &format, 1);
count = 1;
break;
default:
write(1, "%", 1);
write(1, &format, 1);
break;
}
return (count);
}

/**
 * handle_char - Handles %c specifier
 * @c: Character to be printed
 *
 * Return: Number of characters handled
 */
int handle_char(int c)
{
write(1, &c, 1);
return (1);
}

/**
 * handle_string - Handles %s specifier
 * @str: String to be printed
 *
 * Return: Number of characters handled
 */
int handle_string(const char *str)
{
int count = 0;

if (str == NULL)
{
write(1, "(null)", 6);
count = 6;
}
else
{
while (*str)
{
write(1, str, 1);
str++;
count++;
}
}
return (count);
}
